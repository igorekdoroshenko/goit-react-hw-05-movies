{"version":3,"file":"static/js/957.c4df37a2.chunk.js","mappings":"gPAEaA,EAAOC,EAAAA,EAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oDAKlBC,EAAQH,EAAAA,EAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0OAapBG,EAASL,EAAAA,EAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,2R,SC0BnC,EA1C0B,SAAHK,GAAsB,IAAhBC,EAAQD,EAARC,SAC3BC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAmBhBI,EAAY,WAChBD,EAAS,GACX,EAEA,OACEE,EAAAA,EAAAA,MAACjB,EAAI,CAACS,SAhBa,SAAAS,GACnBA,EAAMC,iBAEe,KAAjBL,EAAMM,QAIVX,EAASK,GACTE,KAJEK,MAAM,iCAKV,EAO+BC,SAAA,EAC3BC,EAAAA,EAAAA,KAACnB,EAAK,CACJoB,SAxBe,SAAAN,GACnB,IAAQJ,EAAUI,EAAMO,OAAhBX,MAERC,EAASD,EACX,EAqBMA,MAAOA,EACPY,KAAK,OACLC,WAAS,EACTC,YAAY,kBAEdL,EAAAA,EAAAA,KAACjB,EAAM,CAACoB,KAAK,SAAQJ,SAAC,aAG5B,E,QCpCaO,EAAa5B,EAAAA,EAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oCAItB2B,EAAa7B,EAAAA,EAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,0EAMtB4B,GAAa9B,EAAAA,EAAAA,GAAO+B,EAAAA,GAAP/B,CAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,8FC4BtC,EAvCsB,SAAHK,GAA4C,IAAtCyB,EAAazB,EAAbyB,cAAeC,EAAK1B,EAAL0B,MAAOC,EAAQ3B,EAAR2B,SAW7C,OACElB,EAAAA,EAAAA,MAAAmB,EAAAA,SAAA,CAAAd,SAAA,CAV6B,IAAzBW,EAAcI,QAA0B,KAAVH,GACzBX,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4DAERW,EAAcI,OAAS,OAA3B,EAGO,MAOLd,EAAAA,EAAAA,KAACM,EAAU,CAAAP,SACRW,EAAcK,KAAI,SAAAC,GAAI,OACrBhB,EAAAA,EAAAA,KAACO,EAAU,CAAAR,UACTC,EAAAA,EAAAA,KAACQ,EAAU,CAACS,GAAE,GAAAC,OAAKF,EAAKG,IAAMC,MAAO,CAAEC,KAAMT,GAAWb,SACrDiB,EAAKM,SAFON,EAAKG,GAIT,QAKvB,E,iBCkBA,EAxCe,WAAO,IAADI,EACnBpC,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CuB,EAAarB,EAAA,GAAEmC,EAAgBnC,EAAA,GAEtCoC,GAAsCC,EAAAA,EAAAA,MAAiBC,GAAArC,EAAAA,EAAAA,GAAAmC,EAAA,GAAhDG,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC5BhB,EAAgC,QAA3BY,EAAGK,EAAYE,IAAI,gBAAQ,IAAAP,EAAAA,EAAI,GAEpCX,GAAWmB,EAAAA,EAAAA,MAoBjB,OAZAC,EAAAA,EAAAA,YAAU,WACR,GAAIrB,EACF,KACEsB,EAAAA,EAAAA,IAAatB,GAAOuB,MAAK,SAAAC,GACvBX,GAAgBY,EAAAA,EAAAA,GAAKD,EAAIE,SAC3B,GAGF,CAFE,MAAOC,GACPC,QAAQC,IAAIF,EACd,CAEJ,GAAG,CAAC3B,KAGFX,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAd,UACEL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACyC,EAAU,CAACvD,SArBO,SAAAwD,GACvBb,EAC0B,KAAxBa,EAA6B,CAAE/B,MAAO+B,GAAwB,CAAC,EAEnE,KAkBM1C,EAAAA,EAAAA,KAAC2C,EAAa,CACZjC,cAAeA,EACfC,MAAOA,EACPC,SAAUA,QAKpB,C,6JC5CAgC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAW,eAAA7D,GAAA8D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC2C,MAAjD,kDAAiDF,EAAAE,KAAA,EAC3CX,EAAAA,EAAAA,IAAU,GAAD1B,OADf,kDAC2B,aAAAA,OAAY2B,IAAW,KAAD,EAApD,OAARM,EAAQE,EAAAG,KAAAH,EAAAI,OAAA,SACPN,EAASO,KAAKrB,SAAO,wBAAAgB,EAAAM,OAAA,GAAAT,EAAA,KAC/B,kBAJuB,OAAAjE,EAAA2E,MAAA,KAAAC,UAAA,KAMX5B,EAAY,eAAA6B,GAAAf,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAc,EAAMpD,GAAK,IAAAwC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OACvB,kDAAAS,EAAAT,KAAA,EAESX,EAAAA,EAAAA,IAAU,GAAD1B,OAFlB,4CAGD,aAAAA,OAAY2B,EAAO,WAAA3B,OAAUP,EAAK,YAC7C,KAAD,EAFa,OAARwC,EAAQa,EAAAR,KAAAQ,EAAAP,OAAA,SAIPN,EAASO,MAAI,wBAAAM,EAAAL,OAAA,GAAAI,EAAA,KACrB,gBARwBE,GAAA,OAAAH,EAAAF,MAAA,KAAAC,UAAA,KAUZK,EAAe,eAAAC,GAAApB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAmB,EAAMC,GAAO,IAAAlB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACc,MAArC,sCAAqCe,EAAAf,KAAA,EACjCX,EAAAA,EAAAA,IAAU,GAAD1B,OADb,sCACyB,KAAAA,OAAImD,EAAO,aAAAnD,OAAY2B,EAAO,oBAAmB,KAAD,EAA9E,OAARM,EAAQmB,EAAAd,KAAAc,EAAAb,OAAA,SACPN,EAASO,MAAI,wBAAAY,EAAAX,OAAA,GAAAS,EAAA,KACrB,gBAJ2BG,GAAA,OAAAJ,EAAAP,MAAA,KAAAC,UAAA,KAefW,EAAY,eAAAC,GAAA1B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyB,EAAML,GAAO,IAAAlB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OACiB,MAArC,sCAAqCoB,EAAApB,KAAA,EAC/BX,EAAAA,EAAAA,IAAU,GAAD1B,OADf,sCAC2B,KAAAA,OAAImD,EAAO,qBAAAnD,OAAoB2B,EAAO,2BAA0B,KAAD,EAA7F,OAARM,EAAQwB,EAAAnB,KAAAmB,EAAAlB,OAAA,SACPN,EAASO,KAAKrB,SAAO,wBAAAsC,EAAAhB,OAAA,GAAAe,EAAA,KAC/B,gBAJwBE,GAAA,OAAAH,EAAAb,MAAA,KAAAC,UAAA,I","sources":["components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","components/SearchResults/SearchResults.styled.jsx","components/SearchResults/SearchResults.jsx","page/Movies/Movies.jsx","service/tmdbApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 5px 5px;\n  font: inherit;\n  cursor: pointer;\n  border: 1px solid #191d1e;\n  font-weight: 600;\n  font-size: 16px;\n  margin-right: 10px;\n  border-radius: 3px 3px;\n  outline: none;\n  margin-bottom: 10px;\n  `;\n\nexport const Button = styled.button`\n  padding: 5px 5px;\n  font: inherit;\n  cursor: pointer;\n  border: 1px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 16px;\n  border-radius: 3px 3px;\n  margin-bottom: 10px;\n  &:hover {\n    color: #750000;\n    border: 1px solid #750000;\n  }\n  `;","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Form, Input, Button } from './SearchForm.styled';\n\nexport const SearchForm = ({ onSubmit }) => {\n  const [value, setValue] = useState('');\n\n  const handleChange = event => {\n    const { value } = event.target;\n\n    setValue(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (value.trim() === '') {\n      alert('Search query can not be empty.');\n      return;\n    }\n    onSubmit(value);\n    clearForm();\n  };\n\n  const clearForm = () => {\n    setValue('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input\n        onChange={handleChange}\n        value={value}\n        type=\"text\"\n        autoFocus\n        placeholder=\"Search films\"\n      />\n      <Button type=\"submit\">Search</Button>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\n\nexport const SearchList = styled.ul`\n  list-style-type: none;\n`;\n\nexport const SearchItem = styled.li`\n  font-weight: 600;\n  font-size: 16px;\n  margin-bottom: 8px;\n`;\n\nexport const SearchLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n\n  &:hover {\n    color: #750000;\n  }\n`;","import PropTypes from 'prop-types';\nimport { SearchList, SearchItem, SearchLink } from './SearchResults.styled';\n\nconst SearchResults = ({ searchResults, query, location }) => {\n  const renderSearchMessage = () => {\n    if (searchResults.length === 0 && query !== '') {\n      return <p>There is no movies with this request. Please, try again</p>;\n    }\n    if (searchResults.length > 0) {\n      return;\n    }\n    return null;\n  };\n\n  return (\n    <>\n      {renderSearchMessage()}\n\n      <SearchList>\n        {searchResults.map(film => (\n          <SearchItem key={film.id}>\n            <SearchLink to={`${film.id}`} state={{ from: location }}>\n              {film.title}\n            </SearchLink>\n          </SearchItem>\n        ))}\n      </SearchList>\n    </>\n  );\n};\n\nSearchResults.propTypes = {\n  searchResults: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n  query: PropTypes.string.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default SearchResults;\n","import SearchForm from 'components/SearchForm/SearchForm';\nimport SearchResults from 'components/SearchResults/SearchResults';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nimport { moviesSearch } from 'service/tmdbApi';\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n\n  const [searchQuery, setSearchQuery] = useSearchParams();\n  const query = searchQuery.get('query') ?? '';\n\n  const location = useLocation();\n\n  const handleFormSubmit = searchQueryFromForm => {\n    setSearchQuery(\n      searchQueryFromForm !== '' ? { query: searchQueryFromForm } : {}\n    );\n  };\n\n  useEffect(() => {\n    if (query) {\n      try {\n        moviesSearch(query).then(res => {\n          setSearchResults([...res.results]);\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [query]);\n\n  return (\n    <>\n      <div>\n        <SearchForm onSubmit={handleFormSubmit} />\n        <SearchResults\n          searchResults={searchResults}\n          query={query}\n          location={location}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b2e60f539e48de4827e6e0d51f4baa7c';\n\nexport const getTrending = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n    const response = await axios.get(`${BASE_URL}?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const moviesSearch = async query => {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n\n  const response = await axios.get(\n    `${BASE_URL}?api_key=${API_KEY}&query=${query}&page=1`\n  );\n\n  return response.data;\n};\n\nexport const movieDetailsApi = async movieId => {\n    const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n  const response = await axios.get(`${BASE_URL}/${movieId}?api_key=${API_KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const movieActors = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/`;\n  const response = await axios.get(\n    `${BASE_URL}/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const movieReviews = async movieId => {\n    const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n    const response = await axios.get(`${BASE_URL}/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n}"],"names":["Form","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Button","_templateObject3","_ref","onSubmit","_useState","useState","_useState2","_slicedToArray","value","setValue","clearForm","_jsxs","event","preventDefault","trim","alert","children","_jsx","onChange","target","type","autoFocus","placeholder","SearchList","SearchItem","SearchLink","Link","searchResults","query","location","_Fragment","length","map","film","to","concat","id","state","from","title","_searchQuery$get","setSearchResults","_useSearchParams","useSearchParams","_useSearchParams2","searchQuery","setSearchQuery","get","useLocation","useEffect","moviesSearch","then","res","_toConsumableArray","results","error","console","log","SearchForm","searchQueryFromForm","SearchResults","axios","API_KEY","getTrending","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","abrupt","data","stop","apply","arguments","_ref2","_callee2","_context2","_x","movieDetailsApi","_ref3","_callee3","movieId","_context3","_x2","movieReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}