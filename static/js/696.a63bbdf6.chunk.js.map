{"version":3,"file":"static/js/696.a63bbdf6.chunk.js","mappings":"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","sources":["components/Casts/Casts.styled.jsx","components/Casts/Casts.jsx","service/tmdbApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  \n  list-style-type: none;\n  width:200px;\n  \n`;\n\nexport const CastText = styled.p`\n  font-weight: 600;\n  font-size: 16px;\n  margin-bottom: 10px;\n`;","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { isEmpty } from 'lodash';\nimport { CastList, CastText } from './Casts.styled';\nimport { movieActors } from 'service/tmdbApi';\n\nconst Casts = () => {\n  const { movieId } = useParams();\n\n  const [castActor, setCastActor] = useState([]);\n\n  useEffect(() => {\n    try {\n      movieActors(movieId).then(res => setCastActor(res.cast.splice(0, 8)));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  return (\n    <>\n      {isEmpty(castActor) ? (\n        <p>We don't have any information about cast for this movie</p>\n      ) : (\n        <>\n          <CastList>\n            {castActor.map(actor => {\n              let source = '';\n              if (!actor.profile_path) {\n                source =\n                  'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg';\n              } else\n                source = `https://image.tmdb.org/t/p/w500/${actor.profile_path}`;\n              return (\n                <li key={actor.id}>\n                  <img src={source} alt={`${actor.name}`} />\n                  <CastText>{actor.name}</CastText>\n                  <CastText>{actor.character}</CastText>\n                </li>\n              );\n            })}\n          </CastList>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Casts;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'b2e60f539e48de4827e6e0d51f4baa7c';\n\nexport const getTrending = async () => {\n    const BASE_URL = 'https://api.themoviedb.org/3/trending/movie/day';\n    const response = await axios.get(`${BASE_URL}?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const moviesSearch = async query => {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie`;\n\n  const response = await axios.get(\n    `${BASE_URL}?api_key=${API_KEY}&query=${query}&page=1`\n  );\n\n  return response.data;\n};\n\nexport const movieDetailsApi = async movieId => {\n    const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n  const response = await axios.get(`${BASE_URL}/${movieId}?api_key=${API_KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const movieActors = async id => {\n  const BASE_URL = `https://api.themoviedb.org/3/movie/`;\n  const response = await axios.get(\n    `${BASE_URL}/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const movieReviews = async movieId => {\n    const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n    const response = await axios.get(`${BASE_URL}/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    return response.data.results;\n}"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastText","_templateObject2","movieId","useParams","_useState","useState","_useState2","_slicedToArray","castActor","setCastActor","useEffect","movieActors","then","res","cast","splice","error","console","log","_jsx","_Fragment","children","isEmpty","map","actor","source","profile_path","concat","_jsxs","src","alt","name","character","id","axios","API_KEY","getTrending","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","moviesSearch","_ref2","_callee2","query","_context2","_x","movieDetailsApi","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","movieReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}